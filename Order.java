/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ali_rice;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Hashtable;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.jdesktop.swingx.prompt.PromptSupport;

/**
 *
 * @author Naffah Amin
 */
public class Order extends javax.swing.JFrame {

    String driver = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
    String url = "jdbc:sqlserver://localhost:1433;databaseName=AliDB";
    String user="l134088";
    String pass="sofabulous12";

    
    JTextField name = new JTextField();
    JTextField vehicleNo = new JTextField();
    JTextField biltiNo = new JTextField();
    Vector Ano = null; float old_rate = 0;
//    Hashtable h = null;
    float rWeight, bagsToDeduct, totalActualBags, remainingWeight, origWeight;
    int j;
    int tp = 0;
    int dues = 0;
    int due = 0;
    int coh = 0;
    int cq = 0;
    boolean flag = false;
    
    private void init()
    {
        j = 0;
        try {
            ResultSet rs = null;
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
            // Step 2.B: Creating JDBC Statement
            Statement stmt = con.createStatement();
            String query;

            rs = stmt.executeQuery("SELECT distinct name FROM Customer_table");

            while (rs.next()) {
                String s = rs.getString(1);
                customername.addItem(s);
            }
            rs = stmt.executeQuery("SELECT distinct supplier_name FROM Product_details_table WHERE remaining_weight > 0");
            while (rs.next()) {
                String s = rs.getString(1);
                supplier_combo.addItem(s);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.toString());
        }
    }
    
    private int sums(Vector<Integer> v) {
        int sum = 0;
        for (int i = 0; i < v.size(); i++) {
            sum = sum + v.get(i);
        }
        return sum;
    }
    
    private void optionOne()
    {
            bardanacostfield.setText("0");
            bardanacostfield.setEnabled(false);
            totalbardanafield.setText("0");
            
            sewingpercostfield.setText("0");
            sewingpercostfield.setEnabled(false);
            totalsewingcostfield.setText("0");
            
            loadingpercostfield.setText("0");
            loadingpercostfield.setEnabled(false);
            totalloadingcostfield.setText("0");
            
            inloadingcostfield.setText("0");
            inloadingcostfield.setEnabled(false);
            totalinloadingcostfield.setText("0");
            
            carrentfield.setText("0");
            carrentfield.setEnabled(false);
            
            brokercombo.setEnabled(false);
            brokerfield.setText("0");
            brokerfield.setEnabled(false);
            brokercomamount.setText("0");
            
            totalafterfield.setText("0");
            perbagfinalcostfield.setText("0");
            totalamountf.setText("Empty");
    }
    
    /**
     * Creates new form Order
     */
    public Order() {
        rWeight = 0;
        bagsToDeduct = 0;
        totalActualBags = 0;
        remainingWeight = 0;
        origWeight = 0;
        initComponents();
        init();
        optionOne();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        customertype = new javax.swing.JComboBox<>();
        changenamebtn = new javax.swing.JButton();
        brokercombo = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        sewingpercostfield = new javax.swing.JTextField();
        totalsewingcostfield = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        locationcombo = new javax.swing.JComboBox<>();
        locLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sizecombo = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        loadingpercostfield = new javax.swing.JTextField();
        totalloadingcostfield = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        totalbagsfield = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        totalweightkg = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        inloadingcostfield = new javax.swing.JTextField();
        totalinloadingcostfield = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        pricerate = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        carrentfield = new javax.swing.JTextField();
        brokercomamount = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        totalamountf = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        bardanacostfield = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        totalafterfield = new javax.swing.JTextField();
        totalbardanafield = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        perbagfinalcostfield = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel24 = new javax.swing.JLabel();
        customername = new javax.swing.JComboBox<>();
        savebtn = new javax.swing.JButton();
        articlenocombo = new javax.swing.JComboBox<>();
        brokerfield = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        supplier_combo = new javax.swing.JComboBox<>();
        jSeparator3 = new javax.swing.JSeparator();
        genBill = new javax.swing.JButton();
        kgbags = new javax.swing.JLabel();
        perbagweight = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        kgbagsdeducted = new javax.swing.JTextField();
        kgbags1 = new javax.swing.JLabel();
        totalkgbags = new javax.swing.JTextField();
        articleLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        idCombo = new javax.swing.JComboBox<>();
        articleLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Sales");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 30, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Customer type");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, -1, -1));

        customertype.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        customertype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Option 1", "Option 2" }));
        customertype.setToolTipText("");
        customertype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customertypeActionPerformed(evt);
            }
        });
        getContentPane().add(customertype, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 80, 100, 45));

        changenamebtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        changenamebtn.setText("Change");
        changenamebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changenamebtnActionPerformed(evt);
            }
        });
        getContentPane().add(changenamebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 80, 85, 45));

        brokercombo.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        brokercombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Percentage", "Rupees" }));
        brokercombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                brokercomboMouseClicked(evt);
            }
        });
        brokercombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brokercomboActionPerformed(evt);
            }
        });
        getContentPane().add(brokercombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 470, 80, 20));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Sewing Per cost");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 260, -1, -1));

        sewingpercostfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sewingpercostfieldKeyPressed(evt);
            }
        });
        getContentPane().add(sewingpercostfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 260, 163, -1));

        totalsewingcostfield.setEditable(false);
        getContentPane().add(totalsewingcostfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 290, 163, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Total Sewing cost");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 290, -1, -1));

        locationcombo.setPreferredSize(new java.awt.Dimension(60, 23));
        locationcombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                locationcomboMouseEntered(evt);
            }
        });
        locationcombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationcomboActionPerformed(evt);
            }
        });
        getContentPane().add(locationcombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 260, 160, 25));

        locLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        locLabel.setText("Location");
        getContentPane().add(locLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 260, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Bag Weight (Size)");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 290, -1, -1));

        sizecombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sizecombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sizecomboMouseClicked(evt);
            }
        });
        sizecombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizecomboActionPerformed(evt);
            }
        });
        getContentPane().add(sizecombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 290, 160, 25));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Loading Per cost");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 320, -1, -1));

        loadingpercostfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                loadingpercostfieldKeyPressed(evt);
            }
        });
        getContentPane().add(loadingpercostfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 320, 163, -1));

        totalloadingcostfield.setEditable(false);
        totalloadingcostfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalloadingcostfieldActionPerformed(evt);
            }
        });
        getContentPane().add(totalloadingcostfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 350, 163, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setText("Total Loading cost");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 350, -1, -1));

        totalbagsfield.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                totalbagsfieldMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                totalbagsfieldMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                totalbagsfieldMouseExited(evt);
            }
        });
        totalbagsfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalbagsfieldActionPerformed(evt);
            }
        });
        totalbagsfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                totalbagsfieldKeyPressed(evt);
            }
        });
        getContentPane().add(totalbagsfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 380, 161, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Total Bags");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 380, 113, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Weight Per Bag");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 410, -1, -1));

        totalweightkg.setEditable(false);
        totalweightkg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalweightkgActionPerformed(evt);
            }
        });
        totalweightkg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                totalweightkgKeyPressed(evt);
            }
        });
        getContentPane().add(totalweightkg, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 440, 161, -1));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setText("In-Loading Per cost");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 380, -1, -1));

        inloadingcostfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inloadingcostfieldKeyPressed(evt);
            }
        });
        getContentPane().add(inloadingcostfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 380, 163, -1));

        totalinloadingcostfield.setEditable(false);
        getContentPane().add(totalinloadingcostfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 410, 163, -1));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel16.setText("Total In-Loading cost");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 410, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Price Rate");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 500, -1, -1));

        pricerate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pricerateMouseClicked(evt);
            }
        });
        pricerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pricerateActionPerformed(evt);
            }
        });
        pricerate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pricerateKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pricerateKeyReleased(evt);
            }
        });
        getContentPane().add(pricerate, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 500, 161, -1));

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel22.setText("Car rent");
        getContentPane().add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 440, -1, -1));
        getContentPane().add(carrentfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 440, 163, -1));

        brokercomamount.setEditable(false);
        brokercomamount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brokercomamountActionPerformed(evt);
            }
        });
        getContentPane().add(brokercomamount, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 470, 85, -1));

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setText("Broker commission");
        getContentPane().add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 470, -1, -1));

        totalamountf.setEditable(false);
        totalamountf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalamountfActionPerformed(evt);
            }
        });
        getContentPane().add(totalamountf, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 530, 161, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Total Amount");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 530, -1, -1));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setText("Bardana cost");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 200, -1, -1));

        bardanacostfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bardanacostfieldKeyPressed(evt);
            }
        });
        getContentPane().add(bardanacostfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 200, 161, -1));

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel19.setText("Total");
        getContentPane().add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 500, -1, -1));

        totalafterfield.setEditable(false);
        getContentPane().add(totalafterfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 500, 161, -1));

        totalbardanafield.setEditable(false);
        getContentPane().add(totalbardanafield, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 230, 161, -1));

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel21.setText("Total Bardana cost");
        getContentPane().add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 230, -1, -1));

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel20.setText("Per Bag with rice cost:");
        getContentPane().add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 530, -1, -1));

        perbagfinalcostfield.setEditable(false);
        getContentPane().add(perbagfinalcostfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 530, 161, -1));

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 650, 1140, 10));

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel24.setText("Customer name");
        getContentPane().add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 90, -1, -1));

        customername.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        customername.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        customername.setToolTipText("");
        customername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customernameActionPerformed(evt);
            }
        });
        getContentPane().add(customername, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 80, 200, 45));

        savebtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        savebtn.setText("Save");
        savebtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                savebtnMouseClicked(evt);
            }
        });
        savebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebtnActionPerformed(evt);
            }
        });
        getContentPane().add(savebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 590, 82, 49));

        articlenocombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        articlenocombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        articlenocombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                articlenocomboMouseClicked(evt);
            }
        });
        articlenocombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                articlenocomboActionPerformed(evt);
            }
        });
        getContentPane().add(articlenocombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 200, 160, 25));

        brokerfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                brokerfieldKeyPressed(evt);
            }
        });
        getContentPane().add(brokerfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 470, 70, -1));

        jLabel18.setText("=");
        getContentPane().add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 472, 20, -1));
        getContentPane().add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-30, 570, 1170, 20));

        supplier_combo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        supplier_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        supplier_combo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                supplier_comboMouseEntered(evt);
            }
        });
        supplier_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplier_comboActionPerformed(evt);
            }
        });
        getContentPane().add(supplier_combo, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 170, 160, 25));

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 150, 20, 420));

        genBill.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        genBill.setText("Generate Bill");
        genBill.setEnabled(false);
        genBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genBillActionPerformed(evt);
            }
        });
        getContentPane().add(genBill, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 590, 150, 50));

        kgbags.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        kgbags.setText("Total 50 kg bags");
        getContentPane().add(kgbags, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 350, -1, -1));

        perbagweight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perbagweightActionPerformed(evt);
            }
        });
        perbagweight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                perbagweightKeyPressed(evt);
            }
        });
        getContentPane().add(perbagweight, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 410, 160, -1));

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel27.setText("Total Weight in Kgs");
        getContentPane().add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 440, -1, -1));

        kgbagsdeducted.setEditable(false);
        getContentPane().add(kgbagsdeducted, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 470, 160, -1));

        kgbags1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        kgbags1.setText("Deducted 50 kg bags");
        getContentPane().add(kgbags1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 470, -1, -1));

        totalkgbags.setEditable(false);
        getContentPane().add(totalkgbags, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 350, 160, -1));

        articleLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        articleLabel1.setText("Article ID");
        getContentPane().add(articleLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 230, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Supplier name");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 170, -1, -1));

        idCombo.setPreferredSize(new java.awt.Dimension(60, 23));
        idCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                idComboMouseEntered(evt);
            }
        });
        idCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idComboActionPerformed(evt);
            }
        });
        getContentPane().add(idCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 230, 160, 25));

        articleLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        articleLabel2.setText("Article name");
        getContentPane().add(articleLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 200, -1, -1));

        jButton3.setText("New");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 80, 60, 40));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void customertypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customertypeActionPerformed
        // TODO add your handling code here:
        if (customertype.getSelectedItem().toString().equals("Option 1"))
        {
            bardanacostfield.setText("0");
            bardanacostfield.setEnabled(false);
            totalbardanafield.setText("0");
            
            sewingpercostfield.setText("0");
            sewingpercostfield.setEnabled(false);
            totalsewingcostfield.setText("0");
            
            loadingpercostfield.setText("0");
            loadingpercostfield.setEnabled(false);
            totalloadingcostfield.setText("0");
            
            inloadingcostfield.setText("0");
            inloadingcostfield.setEnabled(false);
            totalinloadingcostfield.setText("0");
            
            carrentfield.setText("0");
            carrentfield.setEnabled(false);
            
            brokercombo.setEnabled(false);
            brokerfield.setText("0");
            brokerfield.setEnabled(false);
            brokercomamount.setText("0");
            
            totalafterfield.setText("0");
            
            perbagfinalcostfield.setText("0");
        }
        else if (customertype.getSelectedItem().toString().equals("Option 2"))
        {
            bardanacostfield.setEnabled(true);
            sewingpercostfield.setEnabled(true);
            loadingpercostfield.setEnabled(true);
            inloadingcostfield.setEnabled(true);
            carrentfield.setEnabled(true);
            brokercombo.setEnabled(true);
            brokerfield.setEnabled(true);
        }
    }//GEN-LAST:event_customertypeActionPerformed

    private void changenamebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changenamebtnActionPerformed
        // TODO add your handling code here:
        customername.setEnabled(true);
        String changeName = JOptionPane.showInputDialog(null, "New name", null);
        while (changeName.isEmpty()) {
            changeName = JOptionPane.showInputDialog(null, "Type Correct Name", null);
        }
        customername.addItem(changeName);
        customername.setSelectedItem(changeName);
        flag = true;
    }//GEN-LAST:event_changenamebtnActionPerformed

    private void brokercomboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_brokercomboMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_brokercomboMouseClicked

    private void brokercomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brokercomboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_brokercomboActionPerformed

    private void sewingpercostfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sewingpercostfieldKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // Enter was pressed. Your code goes here.
            float sewingpercost = Float.parseFloat(sewingpercostfield.getText());
            int totalbags = Integer.parseInt(totalbagsfield.getText());
            sewingpercost = sewingpercost * totalbags;
            String totalsewingcost;
            totalsewingcost = String.valueOf(sewingpercost);
            totalsewingcostfield.setText(totalsewingcost);
        }
    }//GEN-LAST:event_sewingpercostfieldKeyPressed

    private void locationcomboMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_locationcomboMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_locationcomboMouseEntered

    private void locationcomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationcomboActionPerformed
        // TODO add your handling code here:
        sizecombo.removeAllItems();

        try {
            ResultSet rs = null;
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
            Statement stmt = con.createStatement();
            String query = "select weight from Product_details_table where id=?";
            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1, idCombo.getSelectedItem().toString());
            rs = pst.executeQuery();

            while (rs.next()) {
                String s = rs.getString(1);
                sizecombo.addItem(s);
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_locationcomboActionPerformed

    private void sizecomboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sizecomboMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_sizecomboMouseClicked

    private void sizecomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizecomboActionPerformed
        // TODO add your handling code here:
        
        try {
            ResultSet rs = null;
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
            // Step 2.B: Creating JDBC Statement

            String query = null;
            
            query = ("select update_quantity from Product_details_table where id=?");
            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1, idCombo.getSelectedItem().toString());
            rs = pst.executeQuery();
            if (rs.next()) {
                totalkgbags.setText(rs.getString(1));
            }

            query = ("select original_weight, remaining_weight from Product_details_table where id=?");
            pst = con.prepareStatement(query);
            pst.setString(1, idCombo.getSelectedItem().toString());
            rs = pst.executeQuery();

            if (rs.next()) {
                origWeight = Float.parseFloat(rs.getString(1));
                remainingWeight = Float.parseFloat(rs.getString(2));
                String s = origWeight + " # " + remainingWeight;
                rWeight = Float.parseFloat(rs.getString(2));
                //System.out.println("Remaining weight " + rWeight);
                PromptSupport.setPrompt(s, totalweightkg);
                PromptSupport.setForeground(Color.black, totalweightkg);
            }

        } catch (Exception e) {
            // JOptionPane.showMessageDialog(this,e.toString() );
        }
        
        if (sizecombo.getItemCount() == 0)
        {
            return;
        }
        kgbags.setText("Total " + sizecombo.getSelectedItem().toString() + " kg bags");
    }//GEN-LAST:event_sizecomboActionPerformed

    private void loadingpercostfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_loadingpercostfieldKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // Enter was pressed. Your code goes here.
            float loadingpercost = Float.parseFloat(loadingpercostfield.getText());
            int totalbags = Integer.parseInt(totalbagsfield.getText());
            loadingpercost = loadingpercost * totalbags;
            String totalloadingcost;
            totalloadingcost = String.valueOf(loadingpercost);
            totalloadingcostfield.setText(totalloadingcost);
        }
    }//GEN-LAST:event_loadingpercostfieldKeyPressed

    private void totalloadingcostfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalloadingcostfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalloadingcostfieldActionPerformed

    private void totalbagsfieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_totalbagsfieldMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_totalbagsfieldMouseClicked

    private void totalbagsfieldMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_totalbagsfieldMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_totalbagsfieldMouseEntered

    private void totalbagsfieldMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_totalbagsfieldMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_totalbagsfieldMouseExited

    private void totalbagsfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalbagsfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalbagsfieldActionPerformed

    private void totalbagsfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalbagsfieldKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalbagsfieldKeyPressed

    private void totalweightkgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalweightkgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalweightkgActionPerformed

    private void totalweightkgKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalweightkgKeyPressed
        // TODO add your handling code here:
//        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//            // Enter was pressed. Your code goes here.
//            float kgweight = Float.parseFloat(totalweightkg.getText());
//            kgweight = munweight / 40;
//            String totalmunweight;
//            totalmunweight = String.valueOf(munweight);
//            totalweightkg.setText(totalmunweight);
//        }
    }//GEN-LAST:event_totalweightkgKeyPressed

    private void inloadingcostfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inloadingcostfieldKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // Enter was pressed. Your code goes here.
            float inloadingpercost = Float.parseFloat(inloadingcostfield.getText());
            int totalbags = Integer.parseInt(totalbagsfield.getText());
            inloadingpercost = inloadingpercost * totalbags;
            String intotalloadingcost;
            intotalloadingcost = String.valueOf(inloadingpercost);
            totalinloadingcostfield.setText(intotalloadingcost);
        }
    }//GEN-LAST:event_inloadingcostfieldKeyPressed

    private void pricerateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pricerateMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_pricerateMouseClicked

    private void pricerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pricerateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pricerateActionPerformed

    private void pricerateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pricerateKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // Enter was pressed. Your code goes here.
            float one = Float.parseFloat(totalkgbags.getText());
            float two = Float.parseFloat(kgbagsdeducted.getText());
            if (one < two)
            {
                JFrame f=new JFrame();  
                JOptionPane.showMessageDialog(f,"Total bags less than deductable bags.","Error",JOptionPane.WARNING_MESSAGE);   
                totalamountf.setText("Error");
                return;
            }
            
            float totalkgfloat = Float.parseFloat(totalweightkg.getText());
//            totalActualBags = totalkgfloat / (Float.parseFloat(sizecombo.getSelectedItem().toString()));
            float priceratefloat = Float.parseFloat(pricerate.getText());
            float totalfinalrate = totalkgfloat * priceratefloat;
            String totalfinalrateString = String.valueOf(totalfinalrate);
            totalamountf.setText(totalfinalrateString);
        }
    }//GEN-LAST:event_pricerateKeyPressed

    private void pricerateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pricerateKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_pricerateKeyReleased

    private void totalamountfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalamountfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalamountfActionPerformed

    private void bardanacostfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bardanacostfieldKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            // Enter was pressed. Your code goes here.
            float bardanacost = Float.parseFloat(bardanacostfield.getText());
            int totalbags = Integer.parseInt(totalbagsfield.getText());
            bardanacost = bardanacost * totalbags;
            String totalbardanacost;
            totalbardanacost = String.valueOf(bardanacost);
            totalbardanafield.setText(totalbardanacost);
        }
    }//GEN-LAST:event_bardanacostfieldKeyPressed

    private void customernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customernameActionPerformed
        // TODO add your handling code here:
        if (!customername.getSelectedItem().toString().equals("None")) {
            customername.setEnabled(false);
        }
    }//GEN-LAST:event_customernameActionPerformed

    private void savebtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_savebtnMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_savebtnMouseClicked

    private void optionOneSave() {
        
        String customer = customername.getSelectedItem().toString();
        System.out.println(customer);
        
        float totalamount = Float.parseFloat(totalamountf.getText());
        float customBags = Float.parseFloat(totalbagsfield.getText());
        float totalbags = Float.parseFloat(totalkgbags.getText());
        float deductedbags = Float.parseFloat(kgbagsdeducted.getText());
        float remainingBags = totalbags - deductedbags;
        
        int customer_bag_weight = Integer.parseInt(perbagweight.getText());
        String weightinString = sizecombo.getSelectedItem().toString();
        double weight = Double.parseDouble(weightinString);
        
        String priceratef = pricerate.getText();
        float pricerateperBag = Float.parseFloat(priceratef);
        float totalweightkgOriginal = Float.parseFloat(totalweightkg.getText().toString());
        float updateWeight = remainingWeight - totalweightkgOriginal;

        // assumed values
        String location = locationcombo.getSelectedItem().toString();
        String article_no = articlenocombo.getSelectedItem().toString();

        String receiveamount = JOptionPane.showInputDialog(null, "Recieving", null);
        Float receiveamountfloat = Float.parseFloat(receiveamount);
        
        try {
            ResultSet rs = null;
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
            // Step 2.B: Creating JDBC Statement
            Statement stmt = con.createStatement();
            String query;
            PreparedStatement pst = null;

//            float totalbagcost, olddue, storeOldDue;
//            if (flag == true) {
//                olddue = 0;
//                storeOldDue = 0;
//                totalbagcost = (totalamount - receiveamountfloat);
//            } else {
//                stmt = con.createStatement();
//                query = "SELECT TOP(1) dues FROM Customer_table WHERE name=? ORDER BY dues DESC";
//                pst = con.prepareStatement(query);
//                pst.setString(1, customername.getSelectedItem().toString());
//                rs = pst.executeQuery();
//                String s = "";
//                if (rs.next()) {
//                    s = rs.getString(1);
//                }
//                if (s.equals("")) {
//                    s = "0";
//                }
//                olddue = Float.parseFloat(s);
//                storeOldDue = olddue;
//                totalbagcost = olddue + (totalamount - receiveamountfloat);
//            }
//
//            totalbagcost = olddue + (totalamount - receiveamountfloat);
//
//            if (totalbagcost > 0) {
//                olddue = totalbagcost;
//            }
            
            float totalbagcost; float olddue,storeOldDue=0;
            if ( flag == true)
            {
                olddue= 0;storeOldDue = 0;
            }
            else
            {

                stmt = con.createStatement();
                query = "SELECT due FROM Customer_table WHERE name=?";
                pst=con.prepareStatement(query);
                pst.setString(1,customername.getSelectedItem().toString() );
                rs =pst.executeQuery();
                String s = null;
                if(rs.next()){
                        s=rs.getString(1);     
                }   
                if(s.equals(null))
                {
                    s = "0";
                }
                olddue= Float.parseFloat(s);
                storeOldDue = olddue;
            }


            totalbagcost =  (totalamount - receiveamountfloat); 

            if(totalbagcost  > 0)
            {
                olddue = totalbagcost;
            }
            
            if (flag == true)
            {
                query = "INSERT INTO Customer_table(name,due,oldest_dues)VALUES(?,?,?)";
                // pst.setInt(1, id);
                pst = con.prepareStatement(query);
                pst.setString(1, customer);
                pst.setFloat(2, totalbagcost);
                pst.setString(3, "0");
                pst.execute();
            }
            else 
            {
               query = "UPDATE Customer_table SET [due]=[due] + ? WHERE name=?";
                // pst.setInt(1, id);
                pst = con.prepareStatement(query);
                pst.setFloat(1, totalbagcost);
                pst.setString(2, customer);
              
                pst.execute(); 
            }
            
//            query = ("INSERT INTO Extra_formula2_table(sewing,in_load,out_load,total_bags,car_rent,bardana)VALUES(?,?,?,?,?,?)");
//            pst = con.prepareStatement(query);

//            // pst.setInt(1, id);
//            pst.setFloat(1, 0);
//            pst.setFloat(2, 0);
//            pst.setFloat(3, 0);
//            pst.setFloat(4, customBags);
//            pst.setFloat(5, 0);
//            pst.setFloat(6, 0);
//            pst.execute();

            query = "INSERT INTO Order_table(customer_name,total_bags,total_rice_price,old_due,date)VALUES(?,?,?,?,?)";
            // pst.setInt(1, id);
            pst = con.prepareStatement(query);
            pst.setString(1, customer);
            pst.setFloat(2, customBags);
            pst.setFloat(3, totalamount);
            pst.setFloat(4, storeOldDue);
            pst.setTimestamp(5, new java.sql.Timestamp(System.currentTimeMillis()));
            pst.execute();

            query = "INSERT INTO Order_detail(product_name,quantity,weight,rate,total_rate,receiving,total_cash,transaction_date, customer_bag_weight, supplier_name, weight_ordered, supplier_id)"
                    + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?)";
            pst = con.prepareStatement(query);

            // pst.setInt(1,id);
            pst.setString(1, article_no);
            pst.setFloat(2, customBags);
            pst.setFloat(3, (float) weight);
            pst.setFloat(4, pricerateperBag);
            pst.setFloat(5, totalamount);
            pst.setFloat(6, receiveamountfloat);
            pst.setFloat(7, (Float.parseFloat(totalweightkg.getText())* Float.parseFloat(pricerate.getText()))- receiveamountfloat );
            pst.setTimestamp(8, new java.sql.Timestamp(System.currentTimeMillis()));
            pst.setFloat(9, customer_bag_weight);
            pst.setString(10, supplier_combo.getSelectedItem().toString());
            pst.setFloat(11, totalweightkgOriginal);
            pst.setString(12, idCombo.getSelectedItem().toString());
            pst.execute();

            query = ("INSERT INTO Driver_detail_table(name,car_no,bilti_no)VALUES(?,?,?)");
            pst = con.prepareStatement(query);

            // pst.setInt(1, id);
            pst.setString(1, name.getText());
            pst.setString(2, vehicleNo.getText());
            pst.setString(3, biltiNo.getText());
            pst.execute();

//            query = ("INSERT INTO Customer_table(name,due)VALUES(?,?)");
//            pst = con.prepareStatement(query);
//
//            // pst.setInt(1, id);
//            pst.setString(1, customername.getSelectedItem().toString());
//            pst.setFloat(2, olddue);
//            pst.execute();
            
            query = ("UPDATE Product_details_table SET update_quantity=?, remaining_weight=? WHERE name=? AND supplier_name=? AND location=?");
            pst = con.prepareStatement(query);

            // pst.setInt(1, id);
            pst.setFloat(1, remainingBags);
            pst.setFloat(2, updateWeight);
            pst.setString(3, articlenocombo.getSelectedItem().toString());
            pst.setString(4, supplier_combo.getSelectedItem().toString());
            pst.setString(5, locationcombo.getSelectedItem().toString());
            pst.execute();
            
            //Update cash flow
            query = ("UPDATE cash_table SET cash=cash + ? where type=?");
            pst = con.prepareStatement(query);

            // pst.setInt(1, id);
            pst.setFloat(1, receiveamountfloat);
            pst.setString(2, "cash");

            pst.execute();

            // finish cash flow
        }

        catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.toString());
        }
    }
    
    public void SaveForProfitLoss()
    {
        boolean ifDatainProfitLossTable = false;
        try {
        ResultSet rs = null;
        Class.forName(driver);
        Connection con = DriverManager.getConnection(url, user, pass);
        Statement stmt = con.createStatement();

        String query = null;
        PreparedStatement pst = null;
        
        query = "SELECT TOP 1 date FROM pl_table ORDER BY date DESC";

        java.util.Date d = null;
        rs = stmt.executeQuery(query);
        if(rs.next())
        {
            ifDatainProfitLossTable = true;
            d = rs.getDate("date");
            JOptionPane.showMessageDialog(null, d);
        }
        String strMonthOfTable = "0";
        String strYearOfTable = "0" ;
        if(ifDatainProfitLossTable == true)
        {
            SimpleDateFormat extractMonthOfTable = new SimpleDateFormat("MM"); // two digit numerical represenation
            strMonthOfTable= extractMonthOfTable.format(d);                 
            SimpleDateFormat extractYearOfTable = new SimpleDateFormat("YYYY"); // four digit numerical represenation
            strYearOfTable= extractYearOfTable.format(d);     
        }
        

        int monthOfTable = Integer.parseInt(strMonthOfTable);
        int yearOfTable = Integer.parseInt(strYearOfTable);

        java.util.Date now = new java.util.Date();
        SimpleDateFormat extractMonth = new SimpleDateFormat("MM"); // two digit numerical represenation
        String strMonth = extractMonth.format(now);     
        SimpleDateFormat extractYear = new SimpleDateFormat("YYYY"); // four digit numerical represenation
        String strYear = extractYear.format(now);     

        int todaysmonth = Integer.parseInt(strMonth);
        int todaysyear = Integer.parseInt(strYear);
        if (ifDatainProfitLossTable == true)
        {
            if (monthOfTable == todaysmonth && yearOfTable == todaysyear)
            {
                query= "UPDATE  pl_table SET [ordered] =[ordered] - ?  WHERE Year(date)='"+todaysyear+"' AND Month(date)='"+todaysmonth+"'";
                pst=con.prepareStatement(query);

                pst.setFloat(1, Float.parseFloat(totalweightkg.getText()) * old_rate);

                pst.executeUpdate();

            }
            else if (todaysmonth > monthOfTable && ifDatainProfitLossTable ==true  )
            {
                float old_weight_p = 0;
                query= "SELECT sum(ordered) as previousOrdered from  pl_table";
                pst = con.prepareStatement(query);
                rs = pst.executeQuery();

                if (rs.next()) {

                    String s = rs.getString("previousOrdered");

                    old_weight_p = Float.parseFloat(s);
                }
                
                
                query= "INSERT INTO  pl_table (date , ordered , old_weight)  VALUES(?,?,?)";

                pst = con.prepareStatement(query);
                pst.setTimestamp(1, new java.sql.Timestamp(System.currentTimeMillis()));
                pst.setFloat(2, Float.parseFloat(totalweightkg.getText()) * old_rate);
                pst.setFloat(3, old_weight_p);
                pst.execute();

            }
        }else
        {
        
            query= "INSERT INTO  pl_table (date , ordered, old_weight)  VALUES(?,?,?)";

            pst = con.prepareStatement(query);
            pst.setTimestamp(1, new java.sql.Timestamp(System.currentTimeMillis()));
            pst.setFloat(2, Float.parseFloat(totalweightkg.getText()) * old_rate);
            pst.setFloat(3, Float.parseFloat("0"));
            pst.execute();
        }
        
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }

    }
        
    private void optionTwoSave() {
        String customer = customername.getSelectedItem().toString();
        System.out.println(customer);
        
        float totalbags = Float.parseFloat(totalkgbags.getText());
        float customBags = Float.parseFloat(totalbagsfield.getText());
        float deductedbags = Float.parseFloat(kgbagsdeducted.getText());
        float remainingBags = totalbags - deductedbags;
        
        int customer_bag_weight = Integer.parseInt(perbagweight.getText());
        
        float totalamount = Float.parseFloat(totalamountf.getText());
        float totalafterAmount = Float.parseFloat(totalafterfield.getText());
        
        float totalbardana = Float.parseFloat(totalbardanafield.getText());
        float totalsewing = Float.parseFloat(totalsewingcostfield.getText());
        float totalinloadingcost = Float.parseFloat(totalinloadingcostfield.getText());
        float totalonloadingcost = Float.parseFloat(totalloadingcostfield.getText());
        float current = Float.parseFloat(carrentfield.getText());
        String weightinString = sizecombo.getSelectedItem().toString();
        double weight = Double.parseDouble(weightinString);
        
        float beforeBrokercom = totalamount + totalbardana + totalsewing + totalinloadingcost + totalonloadingcost
                + current;
        float brokerPercent = Float.parseFloat(brokerfield.getText());
        brokerPercent = brokerPercent / 100;
        brokerPercent = beforeBrokercom * brokerPercent;
        String priceratef = pricerate.getText();
        float pricerateperBag = Float.parseFloat(priceratef);
        float amountAfterBrokerCom = beforeBrokercom + brokerPercent;
        float totalweightkgOriginal = Float.parseFloat(totalweightkg.getText().toString());
        float perbagfinalcost = amountAfterBrokerCom / totalweightkgOriginal;
        //
        float perBagBardana = Float.parseFloat(bardanacostfield.getText().toString());
        float sewintPerBag = Float.parseFloat(sewingpercostfield.getText().toString());
        float outloadPerBag = Float.parseFloat(loadingpercostfield.getText().toString());
        float inloadPerBag = Float.parseFloat(inloadingcostfield.getText().toString());
        float caRrent = Float.parseFloat(carrentfield.getText().toString());
        
        float updateWeight = remainingWeight - totalweightkgOriginal;

        String article_no = articlenocombo.getSelectedItem().toString();

        String receiveamount = JOptionPane.showInputDialog(null, "Recieving", null);
        Float receiveamountfloat = Float.parseFloat(receiveamount);
        
        try {
            ResultSet rs = null;
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
            // Step 2.B: Creating JDBC Statement
            Statement stmt = con.createStatement();
            String query;
            PreparedStatement pst = null;

            float totalbagcost; float olddue,storeOldDue=0;
            if ( flag == true)
            {
                olddue= 0;storeOldDue = 0;
            }
            else
            {

                stmt = con.createStatement();
                query = "SELECT due FROM Customer_table WHERE name=?";
                pst=con.prepareStatement(query);
                pst.setString(1,customername.getSelectedItem().toString() );
                rs =pst.executeQuery();
                String s = null;
                if(rs.next()){
                        s=rs.getString(1);     
                }   
                if(s.equals(null))
                {
                    s = "0";
                }
                olddue= Float.parseFloat(s);
                storeOldDue = olddue;
            }


            totalbagcost =  (totalamount - receiveamountfloat); 

            if(totalbagcost  > 0)
            {
                olddue = totalbagcost;
            }
            
            if (flag == true)
            {
                query = "INSERT INTO Customer_table(name,due,oldest_dues)VALUES(?,?,?)";
                // pst.setInt(1, id);
                pst = con.prepareStatement(query);
                pst.setString(1, customer);
                pst.setFloat(2, totalbagcost);
                pst.setString(3, "0");
                pst.execute();
            }
            else 
            {
               query = "UPDATE Customer_table SET [due]=[due] + ? WHERE name=?";
                // pst.setInt(1, id);
                pst = con.prepareStatement(query);
                pst.setFloat(1, totalbagcost);
                pst.setString(2, customer);
              
                pst.execute(); 
            }
            
            query = ("INSERT INTO Extra_formula2_table(sewing,in_load,out_load,total_bags,car_rent,bardana)VALUES(?,?,?,?,?,?)");
            pst = con.prepareStatement(query);

            // pst.setInt(1, id);
            pst.setFloat(1, sewintPerBag);
            pst.setFloat(2, inloadPerBag);
            pst.setFloat(3, outloadPerBag);
            pst.setFloat(4, customBags);
            pst.setFloat(5, caRrent);
            pst.setFloat(6, perBagBardana);
            pst.execute();

            query = "INSERT INTO Order_table(customer_name,total_bags,total_rice_price,old_due,date)VALUES(?,?,?,?,?)";
            // pst.setInt(1, id);
            pst = con.prepareStatement(query);
            pst.setString(1, customer);
            pst.setFloat(2, customBags);
            pst.setFloat(3, totalafterAmount);
            pst.setFloat(4, olddue);
            pst.setTimestamp(5, new java.sql.Timestamp(System.currentTimeMillis()));
            pst.execute();

            query = "INSERT INTO Order_detail(product_name,quantity,weight,rate,total_rate,receiving,total_cash,transaction_date, customer_bag_weight, supplier_name)"
                    + "VALUES(?,?,?,?,?,?,?,?,?,?)";
            pst = con.prepareStatement(query);

            // pst.setInt(1,id);
            pst.setString(1, article_no);
            pst.setFloat(2, customBags);
            pst.setFloat(3, (float) weight);
            pst.setFloat(4, pricerateperBag);
            pst.setFloat(5, totalafterAmount);
            pst.setFloat(6, receiveamountfloat);
            pst.setFloat(7, (remainingWeight* Float.parseFloat(pricerate.getText()))- receiveamountfloat );
            pst.setTimestamp(8, new java.sql.Timestamp(System.currentTimeMillis()));
            pst.setFloat(9, customer_bag_weight);
            pst.setString(10, supplier_combo.getSelectedItem().toString());

            pst.execute();

            query = ("INSERT INTO Driver_detail_table(name,car_no,bilti_no)VALUES(?,?,?)");
            pst = con.prepareStatement(query);

            // pst.setInt(1, id);
            pst.setString(1, name.getText());
            pst.setString(2, vehicleNo.getText());
            pst.setString(3, biltiNo.getText());
            pst.execute();

//            query = ("INSERT INTO Customer_table(name,due)VALUES(?,?)");
//            pst = con.prepareStatement(query);
//
//            // pst.setInt(1, id);
//            pst.setString(1, customername.getSelectedItem().toString());
//            pst.setFloat(2, olddue);
//            pst.execute();
            
            query = ("UPDATE Product_details_table SET update_quantity=?, remaining_weight=? WHERE name=? AND supplier_name=? AND location=?");
            pst = con.prepareStatement(query);

            // pst.setInt(1, id);
            pst.setFloat(1, remainingBags);
            pst.setFloat(2, updateWeight);
            pst.setString(3, articlenocombo.getSelectedItem().toString());
            pst.setString(4, supplier_combo.getSelectedItem().toString());
            pst.setString(5, locationcombo.getSelectedItem().toString());
            pst.execute();
            
            
            //Update cash flow
            query = ("UPDATE cash_table SET cash=cash - ? where type=?");
            pst = con.prepareStatement(query);

            // pst.setInt(1, id);
            pst.setFloat(1, receiveamountfloat);
            pst.setString(2, "cash");

            pst.execute();

            // finish cash flow
        }catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.toString());
        }
}
        
    
    private void savebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebtnActionPerformed
        // TODO add your handling code here:
        if (totalamountf.getText().equals("Error") || totalamountf.getText().equals("Empty")) {
            JFrame f=new JFrame();  
            JOptionPane.showMessageDialog(f,"Check total amount.","Alert",JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (customername.getSelectedItem().toString().equals("None")) {
            JFrame f=new JFrame();  
            JOptionPane.showMessageDialog(f,"Check customer name.","Alert",JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (customertype.getSelectedItem().toString().equals("Option 1")) {
            optionOneSave();
        }
        else if (customertype.getSelectedItem().toString().equals("Option 2")) {
            optionTwoSave();
        }
        SaveForProfitLoss();
        
        
        savebtn.setEnabled(false);
        genBill.setEnabled(true);
    }//GEN-LAST:event_savebtnActionPerformed

    private void articlenocomboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_articlenocomboMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_articlenocomboMouseClicked

    private void articlenocomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_articlenocomboActionPerformed
        // TODO add your handling code here:
        //        Timestamp currentDate = new java.sql.Timestamp(System.currentTimeMillis());
        //        Date current = new Date(currentDate.getTime());
        //        Date purchase = null;
        idCombo.removeAllItems();
        locationcombo.removeAllItems();
        sizecombo.removeAllItems();

        try {
            ResultSet rs = null;
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
            Statement stmt = con.createStatement();

            String query = null;
            PreparedStatement pst = null;
//            pst.setString(1, articlenocombo.getSelectedItem().toString());
//            rs = pst.executeQuery();
//
//            while (rs.next()) {
//                purchase = new Date(rs.getDate("date").getTime());
//                purchasedate.setText(purchase.toString());
//            }
//
//            long dateDifference = current.getTime() - purchase.getTime();
//            the_rice_lives.setText("" + TimeUnit.DAYS.convert(dateDifference, TimeUnit.MILLISECONDS) + " Days");

            query = "select id from Product_details_table where supplier_name=? and name=?";
            pst = con.prepareStatement(query);
            pst.setString(1, supplier_combo.getSelectedItem().toString());
            pst.setString(2, articlenocombo.getSelectedItem().toString());
            rs = pst.executeQuery();

            while (rs.next()) {
                String s = rs.getString(1);
                idCombo.addItem(s);
            }
        } catch (Exception e) {
            
        }
    }//GEN-LAST:event_articlenocomboActionPerformed

    private void brokercomamountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brokercomamountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_brokercomamountActionPerformed

    private void supplier_comboMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_supplier_comboMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_supplier_comboMouseEntered

    private void supplier_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplier_comboActionPerformed
        // TODO add your handling code here:
        //        Timestamp currentDate = new java.sql.Timestamp(System.currentTimeMillis());
//        Date current = new Date(currentDate.getTime());
//        Date purchase = null;

//        h.clear();
//        h = null;
        idCombo.removeAllItems();
        articlenocombo.removeAllItems();
        locationcombo.removeAllItems();
        sizecombo.removeAllItems();

        try {
            ResultSet rs = null;
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
            Statement stmt = con.createStatement();

            // DefaultComboBoxModel model = (DefaultComboBoxModel) locationcombo.getModel();
            // model.removeAllElements();
            //
            // model = (DefaultComboBoxModel) sizecombo.getModel();
            // model.removeAllElements();
            
            String query = "select distinct name from Product_details_table where supplier_name=? and remaining_weight > 0";
            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1, supplier_combo.getSelectedItem().toString());
            rs = pst.executeQuery();
            
            while (rs.next()) {
//                int i = rs.getInt(1);
                String s = rs.getString(1);
//                h.put(i, s);
                articlenocombo.addItem(s);
            }

//            pst.setString(1, articlenocombo.getSelectedItem().toString());
//            rs = pst.executeQuery();
//
//            while (rs.next()) {
//                purchase = new Date(rs.getDate("date").getTime());
//                purchasedate.setText(purchase.toString());
//            }
//
//            long dateDifference = current.getTime() - purchase.getTime();
//            the_rice_lives.setText("" + TimeUnit.DAYS.convert(dateDifference, TimeUnit.MILLISECONDS) + " Days");

//            query = "select location from Product_details_table where name=?";
//            pst = con.prepareStatement(query);
//            pst.setString(1, articlenocombo.getSelectedItem().toString());
//            rs = pst.executeQuery();
//
//            while (rs.next()) {
//                String s = rs.getString(1);
//                locationcombo.addItem(s);
//            }
        } catch (Exception e) {
            
        }
    }//GEN-LAST:event_supplier_comboActionPerformed

    private void brokerfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_brokerfieldKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (brokercombo.getSelectedItem().toString().equals("Percentage")) {
                float totalamount = Float.parseFloat(totalamountf.getText());
                float totalbardana = Float.parseFloat(totalbardanafield.getText());
                float totalsewing = Float.parseFloat(totalsewingcostfield.getText());
                float totalinloadingcost = Float.parseFloat(totalinloadingcostfield.getText());
                float totalonloadingcost = Float.parseFloat(totalloadingcostfield.getText());
                float carrent = Float.parseFloat(carrentfield.getText());

                float beforeBrokercom = totalamount + totalbardana + totalsewing + totalinloadingcost + totalonloadingcost
                        + carrent;
                float brokerPercent = Float.parseFloat(brokerfield.getText());
                brokerPercent = brokerPercent / 100;
                brokerPercent = beforeBrokercom * brokerPercent;

                float amountAfterBrokerCom = beforeBrokercom + brokerPercent;
                float totalkg = Float.parseFloat(totalweightkg.getText());
                float perbagfinalcost = amountAfterBrokerCom / totalkg;
                String a;
                a = String.valueOf(brokerPercent);
                brokercomamount.setText(a);

                a = String.valueOf(amountAfterBrokerCom);
                totalafterfield.setText(a);

                a = String.valueOf(perbagfinalcost);
                perbagfinalcostfield.setText(a);
            }
            else if (brokercombo.getSelectedItem().toString().equals("Rupees")) {
                float totalamount = Float.parseFloat(totalamountf.getText());
                float totalbardana = Float.parseFloat(totalbardanafield.getText());
                float totalsewing = Float.parseFloat(totalsewingcostfield.getText());
                float totalinloadingcost = Float.parseFloat(totalinloadingcostfield.getText());
                float totalonloadingcost = Float.parseFloat(totalloadingcostfield.getText());
                float carrent = Float.parseFloat(carrentfield.getText());

                float beforeBrokercom = totalamount + totalbardana + totalsewing + totalinloadingcost + totalonloadingcost
                        + carrent;
                float brokerPercent = Float.parseFloat(brokerfield.getText());
                float totalbagsf = Float.parseFloat(totalbagsfield.getText());
                brokerPercent = brokerPercent * totalbagsf;

                float amountAfterBrokerCom = beforeBrokercom + brokerPercent;
                float totalkg = Float.parseFloat(totalweightkg.getText());
                float perbagfinalcost = amountAfterBrokerCom / totalkg;
                String a;
                a = String.valueOf(brokerPercent);
                brokercomamount.setText(a);

                a = String.valueOf(amountAfterBrokerCom);
                totalafterfield.setText(a);

                a = String.valueOf(perbagfinalcost);
                perbagfinalcostfield.setText(a);
            }
            else {
                return;
            }
        }
    }//GEN-LAST:event_brokerfieldKeyPressed

    private void perbagweightKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_perbagweightKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            float num_bags = Float.parseFloat(totalbagsfield.getText());
            float weightPerBag = Float.parseFloat(perbagweight.getText());
            float totalWeight = num_bags * weightPerBag;
            totalweightkg.setText("" + totalWeight);
            
//            bagsToDeduct = (float) Math.floor(totalWeight / (Float.parseFloat(sizecombo.getSelectedItem().toString())));
            bagsToDeduct = (totalWeight / (Float.parseFloat(sizecombo.getSelectedItem().toString())));
            kgbagsdeducted.setText("" + bagsToDeduct);
        }
    }//GEN-LAST:event_perbagweightKeyPressed

    private void genBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genBillActionPerformed
        // TODO add your handling code here:
        if (customertype.getSelectedItem().toString().equals("Option 1")) {
            String article = articlenocombo.getSelectedItem().toString();
            String name = customername.getSelectedItem().toString();
            String weight = perbagweight.getText();
            String amount = totalamountf.getText();
            String rate = pricerate.getText();
            String bags = totalbagsfield.getText();
            
            SimpleBill bill = new SimpleBill(article, name, weight, amount, rate, bags);
            bill.setVisible(true);
        }
        else if (customertype.getSelectedItem().toString().equals("Option 2")) {
            String article = articlenocombo.getSelectedItem().toString();
            String name = customername.getSelectedItem().toString();
            String weight = perbagweight.getText();
            String amount = totalafterfield.getText();
            String rate = pricerate.getText();
            String bags = totalbagsfield.getText();
            
            SimpleBill bill = new SimpleBill(article, name, weight, amount, rate, bags);
            bill.setVisible(true);
        } 
        this.dispose();
    }//GEN-LAST:event_genBillActionPerformed

    private void idComboMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_idComboMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_idComboMouseEntered

    private void idComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idComboActionPerformed
        // TODO add your handling code here:
        locationcombo.removeAllItems();
        sizecombo.removeAllItems();
        
        try {
            ResultSet rs = null;
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
            Statement stmt = con.createStatement();

            String query = null;
            PreparedStatement pst = null;
            
            query = "select location,rate from Product_details_table where id=?";
            pst = con.prepareStatement(query);
            pst.setString(1, idCombo.getSelectedItem().toString());
            rs = pst.executeQuery();

            while (rs.next()) {
                String s = rs.getString(1);
                locationcombo.addItem(s);
                String r = rs.getString(2);
                old_rate =Float.parseFloat(r);
            }
            
            query = "select howdy from Product_details_table where id=?";
                pst = con.prepareStatement(query);
                pst.setString(1, idCombo.getSelectedItem().toString());
                rs = pst.executeQuery();

                while (rs.next()) {
                    if (supplier_combo.getSelectedItem().toString().equals("Mine")) {
                        locLabel.setText("Location (Houdi: " + rs.getInt(1) + ") ");
                    }
                    else {
                        locLabel.setText("Location ");
                    }
                }
        } catch (Exception e) {
            
        }
    }//GEN-LAST:event_idComboActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        Order frame=new Order();
        frame.setDefaultCloseOperation( DISPOSE_ON_CLOSE );
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void perbagweightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perbagweightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_perbagweightActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Order.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Order().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel articleLabel1;
    private javax.swing.JLabel articleLabel2;
    private javax.swing.JComboBox<String> articlenocombo;
    private javax.swing.JTextField bardanacostfield;
    private javax.swing.JTextField brokercomamount;
    private javax.swing.JComboBox<String> brokercombo;
    private javax.swing.JTextField brokerfield;
    private javax.swing.JTextField carrentfield;
    private javax.swing.JButton changenamebtn;
    private javax.swing.JComboBox<String> customername;
    private javax.swing.JComboBox<String> customertype;
    private javax.swing.JButton genBill;
    private javax.swing.JComboBox<String> idCombo;
    private javax.swing.JTextField inloadingcostfield;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel kgbags;
    private javax.swing.JLabel kgbags1;
    private javax.swing.JTextField kgbagsdeducted;
    private javax.swing.JTextField loadingpercostfield;
    private javax.swing.JLabel locLabel;
    private javax.swing.JComboBox<String> locationcombo;
    private javax.swing.JTextField perbagfinalcostfield;
    private javax.swing.JTextField perbagweight;
    private javax.swing.JTextField pricerate;
    private javax.swing.JButton savebtn;
    private javax.swing.JTextField sewingpercostfield;
    private javax.swing.JComboBox<String> sizecombo;
    private javax.swing.JComboBox<String> supplier_combo;
    private javax.swing.JTextField totalafterfield;
    private javax.swing.JTextField totalamountf;
    private javax.swing.JTextField totalbagsfield;
    private javax.swing.JTextField totalbardanafield;
    private javax.swing.JTextField totalinloadingcostfield;
    private javax.swing.JTextField totalkgbags;
    private javax.swing.JTextField totalloadingcostfield;
    private javax.swing.JTextField totalsewingcostfield;
    private javax.swing.JTextField totalweightkg;
    // End of variables declaration//GEN-END:variables
}
